{{ if .Values.ui.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui-deploy
  labels:
    app: "ui-deploy"
spec:
  replicas: {{ .Values.ui.replicas | default 1 }}

  selector:
    matchLabels:
      app: "ui-deploy"
  template:
    metadata:
      labels:
        app: "ui-deploy"
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}


      initContainers:
      - name: ui-init
        image: {{ .Values.ui.image }}
        imagePullPolicy: {{ default .Values.ui.imagePullPolicy "IfNotPresent" }}
        command:
        - /bin/sh
        - -c
        - |
          echo "# init start"
  
          cd /appdata
          if [ ! -d ".venv" ]; then
            echo "# creating virtual environment"
            python -m venv .venv
          fi
          echo "# activating virtual environment"
          sh /appdata/.venv/bin/activate
          
          echo "# downloading requirements"
          echo "===================================="
          cat /app/requirements.txt
          echo "\n===================================="
          mkdir -p /appdata/downloads
          pip download -r /app/requirements.txt -d /appdata/downloads 

          echo "# init end"                  
        volumeMounts:
        - name: cm-files-volume
          mountPath: /app
        - name: pvc-appdata-volume
          mountPath: /appdata

      containers:
      - name: ui-server
        image: {{ .Values.ui.image }}
        imagePullPolicy: {{ default .Values.ui.imagePullPolicy "IfNotPresent" }}
        env:
        - name: API_BASE
          value: ""
        - name: API_BASE_LIST
          value: "{{ include "apiBaseList" . }}"
        command:
        - /bin/sh
        - -c
        - |

          echo "# activating virtual environment"
          cd /appdata
          sh /appdata/.venv/bin/activate

          echo "# installing requirements"
          pip install --no-index --find-links=/appdata/downloads -r /app/requirements.txt
          
          echo "# start"

          cd /app
          streamlit run streamlit_app.py --server.port 8501 --logger.level=debug 
        
        volumeMounts:
        - name: cm-files-volume
          mountPath: /app
        - name: cm-files-pages-volume
          mountPath: /app/pages
        - name: pvc-appdata-volume
          mountPath: /appdata

        ports:
        - containerPort: 8501
          name: http
          protocol: TCP
        resources:
          {{- toYaml .Values.ui.resources | nindent 12 }}


      terminationGracePeriodSeconds: 30

      volumes:
      - name: cm-files-volume
        configMap:
          name: ui-configmap-files
      - name: cm-files-pages-volume
        configMap:
          name: ui-configmap-files-pages
      - name: pvc-appdata-volume
        persistentVolumeClaim:
          claimName: ui-pvc

      {{- with .Values.ui.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.ui.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.ui.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

{{ end }}